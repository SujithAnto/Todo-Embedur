@startuml delete_api

participant Controller as cc
participant Service as ss
participant Repository as jpa
database mysql as db

activate cc

cc -> cc : Use @DeleteMapping annotation and pass the urlPath ('/DeleteTaskFromTasktable')
cc -> cc : Create a public function deleteTaskFromTodoTable() with return type String
cc -> cc : Use @PathVariable or @RequestParam annotation to capture the task ID to be deleted
cc -> cc : Inside the function, call the service function deleteTaskInTable() by passing the task ID as an argument

activate ss

ss -> ss : Create a public function deleteTaskInTable() with return type String and set the parameter Long taskId
ss -> ss : Inside the function, call the repo method deleteById() by passing the taskId as an argument

cc -> ss : The deleteTaskInTable() function will be called from Controller layer

activate jpa

ss -> jpa : deleteById(taskId) will be called from Service Layer

activate db
jpa -> db : The delete query will be executed, and the task will be removed from the db
db -> jpa : The deletion confirmation will be returned to the Repository Layer
deactivate db

jpa -> ss : The deleteById() output will be returned to the Service Layer
deactivate jpa

ss -> cc : The deleteTaskInTable() output will be returned to the Controller Layer as a success message
deactivate ss

cc -> cc : The deleteTaskFromTodoTable() function's output (success message) will be returned to the frontend
deactivate cc

@enduml
